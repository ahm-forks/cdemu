/*
 * This file is generated by gdbus-codegen.
 * gdbus-codegen --interface-prefix org.freedesktop.login1 \
 *     --c-generate-autocleanup all \
 *     --c-namespace CdemuLogin \
 *     --header --output cdemu-logind.h logind.xml
 * Then removed '*Skeleton' references.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __CDEMU_LOGIND_H__
#define __CDEMU_LOGIND_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define CDEMU_LOGIN_TYPE_MANAGER (cdemu_login_manager_get_type ())
#define CDEMU_LOGIN_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CDEMU_LOGIN_TYPE_MANAGER, CdemuLoginManager))
#define CDEMU_LOGIN_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CDEMU_LOGIN_TYPE_MANAGER))
#define CDEMU_LOGIN_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CDEMU_LOGIN_TYPE_MANAGER, CdemuLoginManagerIface))

struct _CdemuLoginManager;
typedef struct _CdemuLoginManager CdemuLoginManager;
typedef struct _CdemuLoginManagerIface CdemuLoginManagerIface;

struct _CdemuLoginManagerIface
{
  GTypeInterface parent_iface;

  void (*prepare_for_sleep) (
    CdemuLoginManager *object,
    gboolean arg_start);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CdemuLoginManager, g_object_unref)
#endif

GType cdemu_login_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *cdemu_login_manager_interface_info (void);
guint cdemu_login_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void cdemu_login_manager_emit_prepare_for_sleep (
    CdemuLoginManager *object,
    gboolean arg_start);



/* ---- */

#define CDEMU_LOGIN_TYPE_MANAGER_PROXY (cdemu_login_manager_proxy_get_type ())
#define CDEMU_LOGIN_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CDEMU_LOGIN_TYPE_MANAGER_PROXY, CdemuLoginManagerProxy))
#define CDEMU_LOGIN_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CDEMU_LOGIN_TYPE_MANAGER_PROXY, CdemuLoginManagerProxyClass))
#define CDEMU_LOGIN_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CDEMU_LOGIN_TYPE_MANAGER_PROXY, CdemuLoginManagerProxyClass))
#define CDEMU_LOGIN_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CDEMU_LOGIN_TYPE_MANAGER_PROXY))
#define CDEMU_LOGIN_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CDEMU_LOGIN_TYPE_MANAGER_PROXY))

typedef struct _CdemuLoginManagerProxy CdemuLoginManagerProxy;
typedef struct _CdemuLoginManagerProxyClass CdemuLoginManagerProxyClass;
typedef struct _CdemuLoginManagerProxyPrivate CdemuLoginManagerProxyPrivate;

struct _CdemuLoginManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  CdemuLoginManagerProxyPrivate *priv;
};

struct _CdemuLoginManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType cdemu_login_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CdemuLoginManagerProxy, g_object_unref)
#endif

void cdemu_login_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CdemuLoginManager *cdemu_login_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
CdemuLoginManager *cdemu_login_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void cdemu_login_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
CdemuLoginManager *cdemu_login_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
CdemuLoginManager *cdemu_login_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

G_END_DECLS

#endif /* __LOGIND_H__ */
